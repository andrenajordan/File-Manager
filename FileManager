import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.JTable;
import javax.swing.JProgressBar;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class FileExplore extends JFrame {

	private JPanel contentPane;
	private JTree tree;
	private DefaultMutableTreeNode top;
	private TreeModel treeModel;
	private String pathNow, pathOld;
	File Now, fileSelected;
	private FileSystemView fsv;
	private JTable table;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FileExplore frame = new FileExplore();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}
			
		});
	}
	
	/**
	 * Create the frame.
	 */
	public FileExplore() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1215, 671);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		
		
		
		JScrollPane scrollPane = new JScrollPane(tree);
		scrollPane.setBounds(58, 96, 320, 454);
		contentPane.add(scrollPane);
		
		DefaultMutableTreeNode root = new DefaultMutableTreeNode();
		fsv = FileSystemView.getFileSystemView();
		File[] roots = fsv.getRoots();
		for (File f : roots) {
			DefaultMutableTreeNode node = new DefaultMutableTreeNode(f);
			root.add(node);
			showchildren(node);
		}
		DefaultTreeModel treemodel = new DefaultTreeModel(root);
		JTree tree = new JTree(treemodel);

		tree.setRootVisible(false);
		scrollPane.setViewportView(tree);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(426, 96, 730, 454);
		contentPane.add(scrollPane_1);
		
		table = new JTable();
		scrollPane_1.setViewportView(table);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table.setAutoCreateRowSorter(true);
		table.setShowVerticalLines(false);
		table.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				try {
					pathNow = String.valueOf(table.getValueAt(table.getSelectedRow(), 2));
					System.out.println("pathnow:"+pathNow);
					if (e.getClickCount() == 2) {
						File f = new File(String.valueOf(table.getValueAt(table.getSelectedRow(), 2)));
						fileSelected = f;
						System.out.println("fileselected: "+fileSelected.getAbsolutePath());
						if (f.isFile())
							try {
								Desktop.getDesktop().open(f);
							} catch (IOException e1) {
							}
						else {
							File files[] = fsv.getFiles(f, true);
							table.removeAll();
							ResetTableData(files);
						}
						Now = new File(pathNow);
						pathOld = pathNow;
					}
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
		});
		scrollPane_1.setViewportView(table);
		
		JButton btnNew = new JButton("New File");
		btnNew.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(fileSelected!=null) {
					String name=JOptionPane.showInputDialog(null,"Nhập tên file: ");
					if(name!=null&&name!="") {
						try {
							File newfile;
							if(fileSelected.isDirectory()) {
								newfile = new File(fileSelected.getAbsolutePath()+"\\"+name);
							} else {
								Path newPath = fileSelected.toPath().resolveSibling(name);
								newfile = newPath.toFile();
							}
						    if (newfile.createNewFile()) {
						    	JOptionPane.showMessageDialog(null, "Tạo file thành công: "+newfile.getName());
						    	File files[] = fsv.getFiles(fileSelected, true);
								table.removeAll();
								ResetTableData(files);
						    } 
						    else {
						    	JOptionPane.showMessageDialog(null, "File: "+newfile.getName()+" đã tồn tại!");
						    }
						} catch (Exception e2) {
							System.out.println("An error occurred.");
						    e2.printStackTrace();
						}
					} else JOptionPane.showMessageDialog(null, "Tạo file thất bại!");
				} else JOptionPane.showMessageDialog(null, "Vui lòng chọn thư mục cần thêm tệp!");
			}
		});
		btnNew.setBounds(232, 21, 89, 23);
		contentPane.add(btnNew);
		
		JButton btnEdit = new JButton("Edit name");
		btnEdit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				File f = new File(pathNow);
				if(f!=null) {
					String name=JOptionPane.showInputDialog(null,"New file name: ", f.getName());
					if(name!=null && (name!="")) {
						try {
							Path source = f.toPath();
							Path renameto = f.toPath().resolveSibling(name);
							Files.move(source, renameto);
							JOptionPane.showMessageDialog(null, "Rename successfully!");
							File files[] = fsv.getFiles(fileSelected, true);
							table.removeAll();
							ResetTableData(files);
						} catch (IOException e1) {
							e1.printStackTrace();
						}
					} else {
						JOptionPane.showMessageDialog(null, "Rename failed!");
					}
				}
			}
		});
		btnEdit.setBounds(510, 21, 133, 23);
		contentPane.add(btnEdit);
		
		JButton btnDelete = new JButton("Delete");
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(fileSelected!=null) {
					int confirm = JOptionPane.showConfirmDialog(null, "Are you sure to delete? "+fileSelected.getName(), "Warning!", JOptionPane.YES_NO_OPTION);
					if (confirm == JOptionPane.YES_OPTION) {
					    try {
					    	File file = new File(String.valueOf(table.getValueAt(table.getSelectedRow(), 2)));
					    	System.out.println("zxc"+file.getAbsolutePath());
					    	Path pathDelFile = file.toPath();
					    	Files.delete(pathDelFile);
					    	JOptionPane.showMessageDialog(null, "Delete successfully "+fileSelected.getName());
					    	File files[] = fsv.getFiles(fileSelected, true);
							table.removeAll();
							ResetTableData(files);
					    }catch (Exception e2) {
							e2.printStackTrace();
						}
					}
				}
			}
		});
		btnDelete.setBounds(669, 21, 89, 23);
		contentPane.add(btnDelete);
		
		JButton btnNewButton = new JButton("New folder");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(fileSelected!=null) {
					String name=JOptionPane.showInputDialog(null,"Folder name: ");
					if(name!=null&&name!="") {
						try {
							Path dir = null;
							Path newPath = null;
							if(fileSelected.isDirectory()) {
								dir = Paths.get(fileSelected.getAbsolutePath()+"\\"+name);
								Files.createDirectories(dir);
								JOptionPane.showMessageDialog(null, "Created folder susscessfully");
								File files[] = fsv.getFiles(fileSelected, true);
								table.removeAll();
								ResetTableData(files);
							} else {
								newPath = fileSelected.toPath().resolveSibling(name);
								Files.createDirectories(newPath);
								JOptionPane.showMessageDialog(null, "Created folder susscessfully");
							}
						} catch (Exception e2) {
							System.out.println("An error occurred.");
						    e2.printStackTrace();
						}
					} else JOptionPane.showMessageDialog(null, "Created folder failed!");
				} else JOptionPane.showMessageDialog(null, "Please choose parent's folder!");
			
			}
		});
		btnNewButton.setBounds(350, 21, 133, 23);
		contentPane.add(btnNewButton);

		tree.addTreeSelectionListener(new TreeSelectionListener() {
			@Override
			public void valueChanged(TreeSelectionEvent arg0) {
				DefaultMutableTreeNode node = (DefaultMutableTreeNode) arg0.getPath().getLastPathComponent();
				showchildren(node);
				File f = (File) node.getUserObject();
				System.out.println(f.getAbsolutePath());
				File[] files = fsv.getFiles(f, true);
				ResetTableData(files);
				Now = f;
			}
		});
				
	}
	public void showchildren(DefaultMutableTreeNode node) {
		node.removeAllChildren();
		File f = (File) node.getUserObject();
		File[] files = fsv.getFiles(f, true);
		for (File file : files) {
			if (file.isDirectory()) {
				node.add(new DefaultMutableTreeNode(file));
			}
		}
	}
	public void ResetTableData(File[] files) {
		table.setModel(new FileTableModel(files));
		table.setRowHeight(25);
		setColumnWidth(0, -1);
		setColumnWidth(3, 60);
		table.getColumnModel().getColumn(3).setMaxWidth(120);
		setColumnWidth(4, -1);
	}
	public void createNode(DefaultMutableTreeNode top) {
		DefaultMutableTreeNode category = null;
		DefaultMutableTreeNode book = null;
		
		
	}
	private void setColumnWidth(int column, int width) {
		TableColumn tableColumn = table.getColumnModel().getColumn(column);
		if (width < 0) {
			JLabel label = new JLabel((String) tableColumn.getHeaderValue());
			Dimension preferred = label.getPreferredSize();
			width = (int) preferred.getWidth() + 14;
		}
		tableColumn.setPreferredWidth(width);
		tableColumn.setMaxWidth(width);
		tableColumn.setMinWidth(width);
	}
}


class FileTableModel extends AbstractTableModel {

	private File[] files;
	private FileSystemView fileSystemView = FileSystemView.getFileSystemView();
	private String[] columns = { "Icon", "File", "Path/name", "Size", "Last Modified" };

	FileTableModel(File[] files) {
		this.files = files;
	}

	public Object getValueAt(int row, int column) {
		File file = files[row];
		switch (column) {
		case 0:
			return fileSystemView.getSystemIcon(file);
		case 1:
			return fileSystemView.getSystemDisplayName(file);
		case 2:
			return file.getPath();
		case 3:
			return file.length();
		case 4:
			return file.lastModified();
		}
		return "";
	}

	public int getColumnCount() {
		return columns.length;
	}

	public Class<?> getColumnClass(int column) {
		switch (column) {
		case 0:
			return ImageIcon.class;
		case 3:
			return Long.class;
		case 4:
			return Date.class;
		}
		return String.class;
	}

	public String getColumnName(int column) {
		return columns[column];
	}

	public int getRowCount() {
		return files.length;
	}

	public File getFile(int row) {
		return files[row];
	}

	public void setFiles(File[] files) {
		this.files = files;
		fireTableDataChanged();
	}
}

